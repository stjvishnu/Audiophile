<div class="min-h-screen bg-black text-white p-4 md:p-6 lg:p-8">
  <div class="max-w-7xl mx-auto">
    <!-- Header section -->
    <div class="bg-gray-100 bg-opacity-10 backdrop-blur-sm rounded-lg p-4 flex flex-col md:flex-row justify-between items-center">
      <h1 class="text-2xl font-bold mb-4 md:mb-0">Users</h1>
      
      <div class="relative w-full md:w-auto">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <input 
          type="text"
          id="searchInput" 
          placeholder="Search users..." 
          class="w-full md:w-80 pl-10 pr-4 py-2 bg-white bg-opacity-90 rounded-full border-transparent focus:border-gray-300 focus:ring-0 text-black"
        >
      </div>
    </div>
    
    <!-- Users list -->
    <div class="mt-8">
      <!-- Table header -->
      <div class="bg-black text-white rounded-lg p-4 mb-4 grid grid-cols-12 gap-4 items-center font-semibold border border-white border-opacity-40">
        <div class="col-span-1">Photo</div>
        <div class="col-span-2">Name</div>
        <div class="col-span-3">Email</div>
        <div class="col-span-2">Mobile</div>
        <div class="col-span-2">Status</div>
        <div class="col-span-2">Actions</div>
      </div>
      
      <!-- Users list -->
      <div class="space-y-4" id="usersContainer" >
        <% users.forEach((user, index) => { %>
          <div 
            class="bg-black bg-opacity-90 backdrop-blur-sm text-white rounded-lg p-4 grid grid-cols-12 gap-4 items-center transform transition-all duration-500 hover:scale-[1.02] hover:shadow-xl border border-white border-opacity-40"
            style="animation: slideIn 0.6s cubic-bezier(0.16, 1, 0.3, 1) forwards; animation-delay: <%= index * 0.1 %>s; opacity: 0; transform: translateY(20px);"
          >
            <div class="col-span-1">
              <img 
                src="<%= user.photo %>" 
                alt="<%= user.firstName %>" 
                class="w-10 h-10 rounded-full object-cover"
              >
            </div>
            <div class="col-span-2 font-medium"><%= user.firstName %></div>
            <div class="col-span-3 "><%= user.email %></div>
            <div class="col-span-2 "><%= user.mobile %></div>
            <div class="col-span-2">
              <span class="<%= user.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %> w-16 py-1 rounded-full text-sm font-medium text-center inline-block">
                <%= user.isActive ? "Active" : "InActive" %>
              </span>
            </div>
            <div class="col-span-2 flex space-x-3">
              <button 
                onclick="toggleUserStatus('<%= user._id %>', '<%= user.isActive %>')"
                class="<%= user.isActive? 'bg-green-600' : 'bg-red-600' %> text-white px-3 py-1 rounded-lg transform transition-all duration-300 hover:scale-105 focus:ring-2 focus:ring-opacity-50 focus:outline-none text-sm"
              >
                <%= user.isActive? 'Block' : 'Unblock' %>
              </button>

            </div>
          </div>
        <% }); %>
      </div>
      
      <!-- Include pagination component -->
      <%# include('../partials/pagination.ejs', { currentPage, totalPages, limit }) %>
    </div>
  </div>

  <%-include ('./partials/pagination.ejs') %>

</div>

<style>
  @keyframes slideIn {
    from { 
      opacity: 0;
      transform: translateY(20px);
    }
    to { 
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-open {
    overflow: hidden;
  }

  #modalContent.show {
    transform: scale(1);
    opacity: 1;
  }
</style>

<script>
  let currentUserId = null;
  
  function toggleUserStatus(id,currentStatus){
    console.log('Hit')
    const newStatus = !JSON.parse(currentStatus);
    const action = JSON.parse(currentStatus)?"Block":"UnBlock"

    Swal.fire({
      title : 'Are you sure ? ',
      text : `You are about to ${action} this user.! `,
      icon : 'warning',
      showCancelButton: true,
      confirmButtonColor : '#3085d6',
      cancelButtonColor : '#d33',
      confirmButtonText: `Yes,${action}!`,
      background:'#1a1a1a',
      color: "#fff"
    })//returns a promise
    .then((result)=>{
      if(result.isConfirmed){

      //fetch request to backend 
      fetch(`/admin/users/status/${id}`,{
      method:"PUT",
      headers:{
        "Content-Type" : "application/json"
      },
      body : JSON.stringify({
        isActive : newStatus,
      })
    })//returns a promise

    .then((response)=>{
      if(response.ok){

        Swal.fire({
          title:`${action}ed`,
          text: `User has been ${action}ed successfully.!`,
          icon: 'success',
          timer:1500,
          showConfirmButton: false,
          background:"#1a1a1a",
          color : "#fff"
        })
        .then(()=>{
          window.location.reload();
        })
      }
    })
    .catch(err=>{
      console.error("Error :",err);
      swal.fire('Error','Something went wrong.','error');
    })
      }
    })
  }

//search functionality

function debounce(fn,wait){
  let timerId=null;

  return function(...args){
    clearTimeout(timerId)
    timerId=setTimeout(()=>{
      fn.apply(this,args)
    },wait)
  }
}

async function handleSearch(){
  


      try{

            //input element always emit input event whenever input value changes
            const searchTerm = document.getElementById('searchInput').value.trim();
            const usersContainer = document.getElementById('usersContainer');
    
           //show loading state
 
            usersContainer.innerHTML = '<div class="text-center py-8" > Searching... </div> '

            const response = await fetch (`/admin/users/search?searchTerm=${searchTerm}`);
            if(!response.ok){
            throw new Error ('Search Failed')
             }

            const users = await response.json();
            renderUsers(users);
          }
      catch(err){
            console.log('Error in get handleSearch: ',err);
            usersContainer.innerHTML = '<div class="text-center py-8 teext-red-500" > Error Loading Results </div>'
          }
}

async function renderUsers(users){
  const usersContainer = document.getElementById('usersContainer');

  if(users.length==0){
    usersContainer.innerHTML = '<div class="text-center py-8 text-gray-400">No users found</div>';
    usersContainer.appendChild(userElement); 
  }
  usersContainer.innerHTML=''; 

  users.forEach((user,index)=>{
  const userElement = document.createElement('div'); // Only in JS memory
  userElement.className = "bg-white bg-opacity-90 backdrop-blur-sm          text-black rounded-lg p-4 grid grid-cols-12 gap-4 items-center transform transition-all duration-500 hover:scale-[1.02] hover:shadow-xl"

  userElement.style.animation = `slideIn 0.6s cubic-bezier(0.16, 1, 0.3, 1) forwards ${index * 0.1}s`;

  userElement.innerHTML = `

      <div class = "col-span-1">
        <img src="${user.photo}" 
        alt="${user.firstName}"
        class="w-10 h-10 rounded-full object-cover"
        >
      </div>

      <div class="col-span-2">${user.firstName}</div>
      <div class="col-span-3">${user.email}</div>
      <div class="col-span-2">${user.mobile}</div>
      <div class="col-span-2">
        <span class="${user.isActive? 'bg-green-100 text-green-800': 'bg-red-100 text-red-800'} w-16 py-1 rounded-full text-sm font-medium text-center inline-block">${user.isActive? "Active":"InActive"}
          </span>
      </div>
      <div class="col-span-2 flex space-x-3">
        <button 
          onclick="toggleUserStatus('${user._id}', '${user.isActive}')"
          class="${user.isActive ? "bg-green-600" : "bg-red-600"} text-white px-3 py-1 rounded-lg transform transition-all duration-300 hover:scale-105 focus:ring-2 focus:ring-opacity-50 focus:outline-none text-sm">
          ${user.isActive ? "Block" : "Unblock"}
        </button>
      </div>
  `;
  usersContainer.appendChild(userElement); // Now in DOM
  })
}
  document.addEventListener('DOMContentLoaded',()=>{
    console.log("Dom fully loaded")
    document.getElementById('searchInput').addEventListener('input', (e) => {
  console.log('Input event fired:', e.target.value);
});
    const searchInput = document.getElementById('searchInput');
    console.log(searchInput)
    searchInput.addEventListener('input',debounce(handleSearch,500))
    
  })


</script>





