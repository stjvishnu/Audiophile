<% const title = "OTP Verification" %>

<div class="bg-white min-h-screen flex items-center justify-center p-4">
    <div class="w-full max-w-md bg-black p-8 rounded-xl border border-gray-800 shadow-2xl transform transition-all duration-300 hover:shadow-[0_20px_40px_rgba(0,0,0,0.3)]">
        <!-- Error Message Container -->
        <% if (locals.error) { %>
        <div class="mb-6 transform transition-all duration-500 animate-slideDown">
            <div class="bg-white/10 backdrop-blur-sm border border-red-500/20 rounded-lg p-4 relative overflow-hidden">
                <!-- Animated border effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-red-500/20 to-white/20 animate-pulse"></div>
                <!-- Error message -->
                <div class="relative z-10 flex items-center">
                    <svg class="w-5 h-5 text-red-400 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10" />
                        <path d="M12 8v4M12 16h.01" />
                    </svg>
                    <p class="text-red-400 text-sm font-medium"><%= error %></p>
                </div>
            </div>
        </div>
        <% } %>

        <div class="text-center">
            <h1 class="text-2xl font-semibold text-white mb-2">Verify Your Email</h1>
            <p class="text-gray-400 text-sm mb-8">Enter the 6-digit code sent to your email</p>
        </div>

        <form action="/user/verify-otp" method="post" id="otpVerificationForm" class="space-y-6">
            <input type="hidden" name="email" value="<%= email %>">
            
            <!-- OTP Input Group -->
            <div class="flex justify-between gap-2 mb-6">
                <% for (let i = 1; i <= 6; i++) { %>
                <div class="relative">
                    <input 
                        type="text" 
                        id="otp<%= i %>" 
                        name="otp<%= i %>" 
                        maxlength="1" 
                        required
                        class="w-12 h-14 text-center bg-transparent text-white text-xl font-bold border-2 border-gray-700 rounded-lg 
                               focus:border-white focus:outline-none transition-colors duration-200"
                        inputmode="numeric"
                        pattern="[0-9]"
                        autocomplete="one-time-code"
                    >
                </div>
                <% } %>
            </div>
            
            <!-- Didn't receive code section -->
            <div class="text-center mb-8">
                <p class="text-gray-400 text-sm mb-2">Didn't receive the code?</p>
                <button 
                    type="button" 
                    id="resendBtn"
                    class="text-white font-medium hover:text-gray-300 transition-colors duration-200"
                >
                    Resend Code <span id="countdownTimer" class="text-gray-500"></span>
                </button>
            </div>

            <!-- Submit Button -->
            <button
                type="submit"
                id="submitBtn"
                class="w-full bg-white text-black py-3 rounded-full font-medium
                       transform transition-all duration-300
                       hover:bg-gray-200 hover:-translate-y-0.5
                       active:translate-y-0"
            >
                Verify
            </button>

            <!-- Back to Login Link -->
            <div class="text-center mt-6">
                <a href="/user/login" class="text-gray-400 text-sm hover:text-white transition-colors duration-200">
                    Back to Sign in
                </a>
            </div>
        </form>
    </div>
</div>

<style>
    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-1rem);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-slideDown {
        animation: slideDown 0.5s ease-out forwards;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const otpInputs = Array.from({ length: 6 }, (_, i) => document.getElementById(`otp${i+1}`));
        const submitBtn = document.getElementById('submitBtn');
        const resendBtn = document.getElementById('resendBtn');
        const countdownTimer = document.getElementById('countdownTimer');
        let remainingTime = 0;
        
        // Focus the first input on page load
        if (otpInputs[0]) {
            setTimeout(() => otpInputs[0].focus(), 100);
        }
        
        // Add input event listeners to OTP fields
        otpInputs.forEach((input, index) => {
            // Handle input
            input.addEventListener('input', (e) => {
                // Only allow numeric input
                e.target.value = e.target.value.replace(/[^0-9]/g, '');
                
                // Auto-focus next input
                if (e.target.value && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
                
                // Check if all inputs are filled
                checkAllInputsFilled();
            });
            
            // Handle backspace
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !e.target.value && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
            
            // Handle paste
            input.addEventListener('paste', (e) => {
                e.preventDefault();
                const pastedData = e.clipboardData.getData('text').replace(/[^0-9]/g, '').slice(0, 6);
                
                pastedData.split('').forEach((digit, i) => {
                    if (i < otpInputs.length) {
                        otpInputs[i].value = digit;
                    }
                });
                
                // Focus the last filled input or the next empty one
                const lastFilledIndex = Math.min(pastedData.length, otpInputs.length - 1);
                otpInputs[lastFilledIndex].focus();
                
                checkAllInputsFilled();
            });
        });
        
        // Form submission
        document.getElementById('otpVerificationForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Collect OTP
            let otp = '';
            let allFilled = true;
            
            otpInputs.forEach(input => {
                if (!input.value) {
                    allFilled = false;
                }
                otp += input.value;
            });
            
            if (!allFilled) {
                showError('Please enter the complete 6-digit code');
                return;
            }
            
            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = 'Verifying...';
            
            // Add hidden input for the full OTP
            const otpInput = document.createElement('input');
            otpInput.type = 'hidden';
            otpInput.name = 'otp';
            otpInput.value = otp;
            this.appendChild(otpInput);
            
            // Submit the form
            this.submit();
        });
        
        // Resend functionality
        resendBtn.addEventListener('click', function() {
            if (remainingTime > 0) return;
            
            // Show loading state
            resendBtn.disabled = true;
            resendBtn.textContent = 'Sending...';
            
            // Send resend request (this would normally be an AJAX call)
            setTimeout(() => {
                startCountdown(30); // 30 second cooldown
                resendBtn.disabled = false;
                resendBtn.textContent = 'Resend Code ';
                
                // Show success message
                const successMessage = document.createElement('div');
                successMessage.className = 'mb-6 transform transition-all duration-500 animate-slideDown';
                successMessage.innerHTML = `
                    <div class="bg-white/10 backdrop-blur-sm border border-green-500/20 rounded-lg p-4 relative overflow-hidden">
                        <div class="absolute inset-0 bg-gradient-to-r from-green-500/20 to-white/20 animate-pulse"></div>
                        <div class="relative z-10 flex items-center">
                            <svg class="w-5 h-5 text-green-400 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                            </svg>
                            <p class="text-green-400 text-sm font-medium">New code sent successfully!</p>
                        </div>
                    </div>
                `;
                
                document.querySelector('.text-center:first-of-type').insertAdjacentElement('beforebegin', successMessage);
                
                // Remove message after 5 seconds
                setTimeout(() => {
                    successMessage.remove();
                }, 5000);
            }, 1500);
        });
        
        function checkAllInputsFilled() {
            const allFilled = otpInputs.every(input => input.value);
            if (allFilled) {
                submitBtn.classList.add('bg-white');
                submitBtn.classList.remove('bg-gray-700', 'text-gray-300', 'cursor-not-allowed');
            }
        }
        
        function startCountdown(seconds) {
            remainingTime = seconds;
            updateCountdown();
            
            const countdownInterval = setInterval(() => {
                remainingTime--;
                updateCountdown();
                
                if (remainingTime <= 0) {
                    clearInterval(countdownInterval);
                    countdownTimer.textContent = '';
                }
            }, 1000);
        }
        
        function updateCountdown() {
            countdownTimer.textContent = `(${remainingTime}s)`;
        }
        
        function showError(message) {
            // Remove any existing error
            const existingError = document.querySelector('.animate-slideDown');
            if (existingError) existingError.remove();
            
            // Create new error element
            const errorDiv = document.createElement('div');
            errorDiv.className = 'mb-6 transform transition-all duration-500 animate-slideDown';
            errorDiv.innerHTML = `
                <div class="bg-white/10 backdrop-blur-sm border border-red-500/20 rounded-lg p-4 relative overflow-hidden">
                    <div class="absolute inset-0 bg-gradient-to-r from-red-500/20 to-white/20 animate-pulse"></div>
                    <div class="relative z-10 flex items-center">
                        <svg class="w-5 h-5 text-red-400 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10" />
                            <path d="M12 8v4M12 16h.01" />
                        </svg>
                        <p class="text-red-400 text-sm font-medium">${message}</p>
                    </div>
                </div>
            `;
            
            // Insert at the top
            const container = document.querySelector('.bg-black');
            container.insertBefore(errorDiv, container.firstChild);
            
            // Reset button state
            document.getElementById('submitBtn').disabled = false;
            document.getElementById('submitBtn').innerHTML = 'Verify';
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                errorDiv.remove();
            }, 5000);
        }
    });
</script>