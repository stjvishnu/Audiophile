
<style>
  .dropdown-enter {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
  }
  .dropdown-enter-active {
      opacity: 1;
      transform: translateY(0) scale(1);
      transition: all 0.2s ease-out;
  }
  .dropdown-leave {
      opacity: 1;
      transform: translateY(0) scale(1);
  }
  .dropdown-leave-active {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
      transition: all 0.15s ease-in;
  }
  .filter-section {
      border-bottom: 1px solid #e5e7eb;
  }
  .filter-section:last-child {
      border-bottom: none;
  }
  .price-range-slider {
      -webkit-appearance: none;
      appearance: none;
      height: 6px;
      border-radius: 3px;
      background: #e5e7eb;
      outline: none;
  }
  .price-range-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: #374151;
      cursor: pointer;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }
  .price-range-slider::-moz-range-thumb {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: #374151;
      cursor: pointer;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }
  .hidden {
      display: none !important;
  }
  .rotate-180 {
      transform: rotate(180deg);
  }
  .toggle-switch {
      position: relative;
      display: inline-block;
      width: 44px;
      height: 24px;
  }
  .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
  }
  .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 24px;
  }
  .toggle-slider:before {
      position: absolute;
      content: "";
      height: 20px;
      width: 20px;
      left: 2px;
      bottom: 2px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
  }
  input:checked + .toggle-slider {
      background-color: #374151;
  }
  input:checked + .toggle-slider:before {
      transform: translateX(20px);
  }
</style>
</head>
<body class="bg-gray-50">
<!-- Banner Section -->
<section class="banner">
  <div class="container mx-auto text-center max-w-7xl p-4 bg-gradient-to-br from-gray-50 to-gray-100 shadow-sm mb-4 mt-6 rounded-3xl">
      <h1 class="text-3xl font-bold text-gray-800">All Products</h1>
  </div>
</section>

<!-- Filter and Sort Controls -->
<div class="flex justify-between items-center mb-6">
  
  <!-- Filter Dropdown -->
  <div class="relative ml-24">
      <button id="filterToggle" class="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200">
          <img src="/img/filter.svg" class="w-6 h-6" alt="Filter">
          <span class="text-sm font-medium text-gray-700">Filters</span>
          <svg id="filterArrow" class="w-4 h-4 text-gray-500 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
      </button>
      
      <!-- Filter Dropdown Content -->
      <div id="filterDropdown" class="hidden absolute top-full left-0 mt-2 w-80 bg-white rounded-xl shadow-xl border border-gray-200 z-50 max-h-96 overflow-y-auto">
          
          <!-- In Stock Toggle -->
          <div class="filter-section p-4">
              <div class="flex items-center justify-between">
                  <span class="text-sm font-medium text-gray-700">In stock only</span>
                  <label class="toggle-switch">
                      <input type="checkbox" id="inStockToggle">
                      <span class="toggle-slider"></span>
                  </label>
              </div>
          </div>

          <!-- Categories -->
          <div class="filter-section p-4">
              <h3 class="text-sm font-medium text-gray-700 mb-3">Ideal For</h3>
              <div class="space-y-2">
                  <label class="flex items-center space-x-2 cursor-pointer">
                      <input type="checkbox" value="beginners" name="categories" class="rounded border-gray-300 text-gray-600 focus:ring-gray-500">
                      <span class="text-sm text-gray-600">ðŸŒ± Beginners (116)</span>
                  </label>
                  <label class="flex items-center space-x-2 cursor-pointer">
                      <input type="checkbox" value="enthusiasts" name="categories" class="rounded border-gray-300 text-gray-600 focus:ring-gray-500">
                      <span class="text-sm text-gray-600">ðŸ¤© Budding Enthusiasts (45)</span>
                  </label>
                  <label class="flex items-center space-x-2 cursor-pointer">
                      <input type="checkbox" value="audiophiles" name="categories" class="rounded border-gray-300 text-gray-600 focus:ring-gray-500">
                      <span class="text-sm text-gray-600">ðŸŽ§ Serious Audiophiles Only (20)</span>
                  </label>
              </div>
          </div>

          <!-- Price Range -->
          <div class="filter-section p-4">
              <h3 class="text-sm font-medium text-gray-700 mb-3">Price Range</h3>
              <div class="space-y-3">
                  <div class="relative">
                      <input type="range" id="priceMin" min="0" max="50000" step="500" value="0" class="price-range-slider w-full">
                      <input type="range" id="priceMax" min="0" max="50000" step="500" value="50000" class="price-range-slider w-full absolute top-0">
                  </div>
                  <div class="flex items-center space-x-4">
                      <div class="flex items-center space-x-1">
                          <span class="text-xs text-gray-500">â‚¹</span>
                          <input type="number" id="priceMinInput" value="0" class="w-20 px-2 py-1 text-xs border border-gray-300 rounded">
                      </div>
                      <span class="text-xs text-gray-500">to</span>
                      <div class="flex items-center space-x-1">
                          <span class="text-xs text-gray-500">â‚¹</span>
                          <input type="number" id="priceMaxInput" value="50000" class="w-20 px-2 py-1 text-xs border border-gray-300 rounded">
                      </div>
                  </div>
              </div>
          </div>

          <!-- Brands -->
          <div class="filter-section p-4">
              <h3 class="text-sm font-medium text-gray-700 mb-3">Brand</h3>
              <div class="space-y-2">
                  <label class="flex items-center space-x-2 cursor-pointer">
                      <input type="checkbox" value="sony" name="brands" class="rounded border-gray-300 text-gray-600 focus:ring-gray-500">
                      <span class="text-sm text-gray-600">Sony</span>
                  </label>
                  <label class="flex items-center space-x-2 cursor-pointer">
                      <input type="checkbox" value="bose" name="brands" class="rounded border-gray-300 text-gray-600 focus:ring-gray-500">
                      <span class="text-sm text-gray-600">Bose</span>
                  </label>
                  <label class="flex items-center space-x-2 cursor-pointer">
                      <input type="checkbox" value="sennheiser" name="brands" class="rounded border-gray-300 text-gray-600 focus:ring-gray-500">
                      <span class="text-sm text-gray-600">Sennheiser</span>
                  </label>
              </div>
          </div>

          <!-- Apply Button -->
          <div class="p-4 bg-gray-50 rounded-b-xl">
              <button id="applyFilters" class="w-full bg-gray-800 text-white py-2 px-4 rounded-lg hover:bg-gray-900 transition-colors duration-200 text-sm font-medium">
                  Apply Filters
              </button>
          </div>
      </div>
  </div>

  <!-- Sort Dropdown -->
  <div class="relative mr-24">
      <button id="sortToggle" class="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200">
          <img src="/img/sort.svg" class="w-4 h-4" alt="Sort">
          <span class="text-sm font-medium text-gray-700">Sort by: <span id="currentSort">Featured</span></span>
          <svg id="sortArrow" class="w-4 h-4 text-gray-500 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
      </button>
      
      <!-- Sort Dropdown Content -->
      <div id="sortDropdown" class="hidden absolute top-full right-0 mt-2 w-56 bg-white rounded-xl shadow-xl border border-gray-200 z-50">
          <div class="p-2">
              <button data-sort="featured" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150 bg-gray-100 font-medium">
                  Featured
              </button>
              <button data-sort="best-selling" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Best selling
              </button>
              <button data-sort="alphabetical-az" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Alphabetically, A-Z
              </button>
              <button data-sort="alphabetical-za" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Alphabetically, Z-A
              </button>
              <button data-sort="price-low-high" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Price, low to high
              </button>
              <button data-sort="price-high-low" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Price, high to low
              </button>
              <button data-sort="date-old-new" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Date, old to new
              </button>
              <button data-sort="date-new-old" class="sort-option w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-150">
                  Date, new to old
              </button>
          </div>
      </div>
  </div>
</div>

<!-- Products Grid -->
<div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10">
      <% products.forEach((product) => { %>
          <div class="group relative h-[420px] w-full overflow-hidden rounded-3xl bg-gradient-to-br from-gray-50 to-gray-100 shadow-sm hover:shadow-lg transition-all duration-300">
              
              <div class="absolute top-6 right-6 z-10 flex gap-2">
                  <!-- Wishlist Button -->
                  <button class="p-2 bg-white/90 rounded-full shadow-md hover:bg-white transition-all duration-200">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700 hover:text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                  </button>
              </div>
              
              <!-- Product Image -->
              <div class="absolute inset-0 flex items-center justify-center p-10 mix-blend-multiply">
                  <img src="<%= product.productImages[0] %>" alt="<%= product.name %>" 
                       class="h-72 w-72 object-contain transition-all duration-300 group-hover:scale-105 group-hover:rotate-1">
              </div>
              
              <!-- Product Info -->
              <div class="absolute bottom-0 left-0 right-0 p-8 bg-gradient-to-t from-black/30 to-transparent text-white">
                  <!-- Main Info -->
                  <div class="transform translate-y-16 group-hover:translate-y-0 transition-transform duration-300">
                      <span class="text-sm font-medium tracking-widest opacity-90"><%= product.name %></span>
                      <h3 class="text-2xl font-bold mt-1"><%= product.brand %></h3>
                      
                      <!-- Pricing -->
                      <div class="mt-3 flex items-center gap-2">
                          <span class="text-lg text-black font-bold"><%= product.discountedPrice %> â‚¹</span>
                          <span class="text-sm line-through opacity-70"><%= product.price %></span>
                          <span class="ml-2 px-2 py-0.5 bg-green-500/90 text-xs font-bold rounded-full"><%= product.discount %>%</span>
                      </div>
                  </div>
                  
                  <!-- Description -->
                  <div class="mt-3 max-h-0 opacity-0 group-hover:max-h-20 group-hover:opacity-100 transition-all duration-300 ease-in-out overflow-hidden">
                      <p class="text-sm font-light opacity-90">Entry level IEM with exceptional sound quality and comfort for long listening sessions.</p>
                  </div>
                  
                  <!-- Action Buttons -->
                  <div class="mt-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300 delay-100 flex justify-between items-center">
                      <button class="flex items-center text-sm font-medium tracking-wider">
                          EXPLORE DETAILS
                          <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                          </svg>
                      </button>
                      
                      <!-- Add to Cart -->
                      <button class="flex items-center gap-1 px-4 py-2 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full text-sm font-medium transition-all duration-200 border border-white/20 hover:border-white/40">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                          </svg>
                          ADD TO CART
                      </button>
                  </div>
              </div>
          </div>
      <% }) %>
  </div>
</div>

<script>
  // Filter and Sort Management
  class ProductFilters {
      constructor() {
          this.filterOpen = false;
          this.sortOpen = false;
          this.currentSort = 'featured';
          this.filters = {
              inStock: false,
              categories: [],
              priceMin: 0,
              priceMax: 50000,
              brands: []
          };
          
          this.init();
      }

      init() {
          this.bindEvents();
          this.loadCurrentFilters();
          this.syncPriceInputs();
      }

      bindEvents() {
          // Filter toggle
          document.getElementById('filterToggle').addEventListener('click', (e) => {
              e.stopPropagation();
              this.toggleFilter();
          });

          // Sort toggle
          document.getElementById('sortToggle').addEventListener('click', (e) => {
              e.stopPropagation();
              this.toggleSort();
          });

          // Close dropdowns when clicking outside
          document.addEventListener('click', (e) => {
              if (!e.target.closest('#filterDropdown') && !e.target.closest('#filterToggle')) {
                  this.closeFilter();
              }
              if (!e.target.closest('#sortDropdown') && !e.target.closest('#sortToggle')) {
                  this.closeSort();
              }
          });

          // Sort options
          document.querySelectorAll('.sort-option').forEach(option => {
              option.addEventListener('click', (e) => {
                  const sortValue = e.target.getAttribute('data-sort');
                  this.selectSort(sortValue, e.target.textContent.trim());
              });
          });

          // Apply filters button
          document.getElementById('applyFilters').addEventListener('click', () => {
              this.applyFilters();
          });

          // Price range sliders
          const priceMin = document.getElementById('priceMin');
          const priceMax = document.getElementById('priceMax');
          const priceMinInput = document.getElementById('priceMinInput');
          const priceMaxInput = document.getElementById('priceMaxInput');

          priceMin.addEventListener('input', (e) => {
              this.filters.priceMin = parseInt(e.target.value);
              priceMinInput.value = e.target.value;
              if (this.filters.priceMin >= this.filters.priceMax) {
                  this.filters.priceMax = this.filters.priceMin + 500;
                  priceMax.value = this.filters.priceMax;
                  priceMaxInput.value = this.filters.priceMax;
              }
          });

          priceMax.addEventListener('input', (e) => {
              this.filters.priceMax = parseInt(e.target.value);
              priceMaxInput.value = e.target.value;
              if (this.filters.priceMax <= this.filters.priceMin) {
                  this.filters.priceMin = this.filters.priceMax - 500;
                  priceMin.value = this.filters.priceMin;
                  priceMinInput.value = this.filters.priceMin;
              }
          });

          priceMinInput.addEventListener('change', (e) => {
              this.filters.priceMin = parseInt(e.target.value);
              priceMin.value = e.target.value;
          });

          priceMaxInput.addEventListener('change', (e) => {
              this.filters.priceMax = parseInt(e.target.value);
              priceMax.value = e.target.value;
          });

          // In stock toggle
          document.getElementById('inStockToggle').addEventListener('change', (e) => {
              this.filters.inStock = e.target.checked;
          });

          // Category checkboxes
          document.querySelectorAll('input[name="categories"]').forEach(checkbox => {
              checkbox.addEventListener('change', (e) => {
                  if (e.target.checked) {
                      this.filters.categories.push(e.target.value);
                  } else {
                      this.filters.categories = this.filters.categories.filter(cat => cat !== e.target.value);
                  }
              });
          });

          // Brand checkboxes
          document.querySelectorAll('input[name="brands"]').forEach(checkbox => {
              checkbox.addEventListener('change', (e) => {
                  if (e.target.checked) {
                      this.filters.brands.push(e.target.value);
                  } else {
                      this.filters.brands = this.filters.brands.filter(brand => brand !== e.target.value);
                  }
              });
          });
      }

      toggleFilter() {
          this.filterOpen = !this.filterOpen;
          if (this.filterOpen) {
              this.closeSort();
              this.showDropdown('filterDropdown', 'filterArrow');
          } else {
              this.hideDropdown('filterDropdown', 'filterArrow');
          }
      }

      toggleSort() {
          this.sortOpen = !this.sortOpen;
          if (this.sortOpen) {
              this.closeFilter();
              this.showDropdown('sortDropdown', 'sortArrow');
          } else {
              this.hideDropdown('sortDropdown', 'sortArrow');
          }
      }

      closeFilter() {
          if (this.filterOpen) {
              this.filterOpen = false;
              this.hideDropdown('filterDropdown', 'filterArrow');
          }
      }

      closeSort() {
          if (this.sortOpen) {
              this.sortOpen = false;
              this.hideDropdown('sortDropdown', 'sortArrow');
          }
      }

      showDropdown(dropdownId, arrowId) {
          const dropdown = document.getElementById(dropdownId);
          const arrow = document.getElementById(arrowId);
          
          dropdown.classList.remove('hidden');
          dropdown.classList.add('dropdown-enter');
          arrow.classList.add('rotate-180');
          
          // Trigger animation
          setTimeout(() => {
              dropdown.classList.remove('dropdown-enter');
              dropdown.classList.add('dropdown-enter-active');
          }, 10);
      }

      hideDropdown(dropdownId, arrowId) {
          const dropdown = document.getElementById(dropdownId);
          const arrow = document.getElementById(arrowId);
          
          dropdown.classList.remove('dropdown-enter-active');
          dropdown.classList.add('dropdown-leave-active');
          arrow.classList.remove('rotate-180');
          
          setTimeout(() => {
              dropdown.classList.add('hidden');
              dropdown.classList.remove('dropdown-leave-active');
          }, 150);
      }

      selectSort(value, text) {
          this.currentSort = value;
          document.getElementById('currentSort').textContent = text;
          
          // Update active state
          document.querySelectorAll('.sort-option').forEach(option => {
              option.classList.remove('bg-gray-100', 'font-medium');
          });
          document.querySelector(`[data-sort="${value}"]`).classList.add('bg-gray-100', 'font-medium');
          
          this.closeSort();
          this.applyFilters();
      }

      applyFilters() {
          const params = new URLSearchParams();
          
          if (this.filters.inStock) params.append('inStock', 'true');
          if (this.filters.categories.length) params.append('categories', this.filters.categories.join(','));
          if (this.filters.priceMin > 0) params.append('minPrice', this.filters.priceMin);
          if (this.filters.priceMax < 50000) params.append('maxPrice', this.filters.priceMax);
          if (this.filters.brands.length) params.append('brands', this.filters.brands.join(','));
          if (this.currentSort !== 'featured') params.append('sort', this.currentSort);
          
          window.location.href = '/products?' + params.toString();
      }

      loadCurrentFilters() {
          const urlParams = new URLSearchParams(window.location.search);
          
          // Load in stock filter
          if (urlParams.get('inStock') === 'true') {
              this.filters.inStock = true;
              document.getElementById('inStockToggle').checked = true;
          }
          
          // Load categories
          const categories = urlParams.get('categories');
          if (categories) {
              this.filters.categories = categories.split(',');
              this.filters.categories.forEach(cat => {
                  const checkbox = document.querySelector(`input[name="categories"][value="${cat}"]`);
                  if (checkbox) checkbox.checked = true;
              });
          }
          
          // Load price range
          const minPrice = urlParams.get('minPrice');
          const maxPrice = urlParams.get('maxPrice');
          if (minPrice) {
              this.filters.priceMin = parseInt(minPrice);
              document.getElementById('priceMin').value = minPrice;
              document.getElementById('priceMinInput').value = minPrice;
          }
          if (maxPrice) {
              this.filters.priceMax = parseInt(maxPrice);
              document.getElementById('priceMax').value = maxPrice;
              document.getElementById('priceMaxInput').value = maxPrice;
          }
          
          // Load brands
          const brands = urlParams.get('brands');
          if (brands) {
              this.filters.brands = brands.split(',');
              this.filters.brands.forEach(brand => {
                  const checkbox = document.querySelector(`input[name="brands"][value="${brand}"]`);
                  if (checkbox) checkbox.checked = true;
              });
          }
          
          // Load sort
          const sort = urlParams.get('sort') || 'featured';
          this.currentSort = sort;
          const sortOption = document.querySelector(`[data-sort="${sort}"]`);
          if (sortOption) {
              document.getElementById('currentSort').textContent = sortOption.textContent.trim();
              document.querySelectorAll('.sort-option').forEach(option => {
                  option.classList.remove('bg-gray-100', 'font-medium');
              });
              sortOption.classList.add('bg-gray-100', 'font-medium');
          }
      }

      syncPriceInputs() {
          // Sync slider and input values
          document.getElementById('priceMin').value = this.filters.priceMin;
          document.getElementById('priceMax').value = this.filters.priceMax;
          document.getElementById('priceMinInput').value = this.filters.priceMin;
          document.getElementById('priceMaxInput').value = this.filters.priceMax;
      }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
      new ProductFilters();
  });
</script>
</body>
